class Solution {
public:
    vector<vector<int>> updateMatrix(vector<vector<int>>& mat) {
        //don't use dfs as we need minimum dist . if use dfs an element can be visited after long traversal even if its very closer of 0.use bfs as it will cover simultaneously all the neighbouring all the elements.
        int row=mat.size();
        int col=mat[0].size();
        queue<pair<pair<int,int>,int>>q;
        vector<vector<int>>ans(row, vector<int>(col, INT_MAX));
        vector<vector<bool>>visited(row,vector<bool>(col,false));
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                if(mat[i][j]==0){
                    q.push({{i,j},0});
                    visited[i][j]=true;
                    ans[i][j]=0;
                }
            }
        }
        while(!q.empty()){
            auto front=q.front();
            q.pop();
            int x=front.first.first;
            int y=front.first.second;
            int dist=front.second;
            int delrow[]={-1,0,0,1};
            int delcol[]={0,1,-1,0};
            for(int i=0;i<4;i++){
                 int nx=x+delrow[i];
                 int ny=y+delcol[i];
                 if(nx>=0 && nx<row && ny>=0 && ny<col && !visited[nx][ny]){
                    q.push({{nx,ny},dist+1});
                    visited[nx][ny]=true;
                    ans[nx][ny]=dist+1;
                 }
            }

        }
        return ans;
        
    }
};
